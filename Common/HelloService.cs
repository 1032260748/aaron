/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class HelloService
{
    public interface Iface
    {
        string hello(string para);
#if SILVERLIGHT
    IAsyncResult Begin_hello(AsyncCallback callback, object state, string para);
    string End_hello(IAsyncResult asyncResult);
#endif
        int @add(int a, int b);
#if SILVERLIGHT
    IAsyncResult Begin_add(AsyncCallback callback, object state, int a, int b);
    int End_add(IAsyncResult asyncResult);
#endif
    }

    public class Client : IDisposable, Iface
    {
        public Client(TProtocol prot)
            : this(prot, prot)
        {
        }

        public Client(TProtocol iprot, TProtocol oprot)
        {
            iprot_ = iprot;
            oprot_ = oprot;
        }

        protected TProtocol iprot_;
        protected TProtocol oprot_;
        protected int seqid_;

        public TProtocol InputProtocol
        {
            get { return iprot_; }
        }
        public TProtocol OutputProtocol
        {
            get { return oprot_; }
        }


        #region " IDisposable Support "
        private bool _IsDisposed;

        // IDisposable
        public void Dispose()
        {
            Dispose(true);
        }


        protected virtual void Dispose(bool disposing)
        {
            if (!_IsDisposed)
            {
                if (disposing)
                {
                    if (iprot_ != null)
                    {
                        ((IDisposable)iprot_).Dispose();
                    }
                    if (oprot_ != null)
                    {
                        ((IDisposable)oprot_).Dispose();
                    }
                }
            }
            _IsDisposed = true;
        }
        #endregion



#if SILVERLIGHT
    public IAsyncResult Begin_hello(AsyncCallback callback, object state, string para)
    {
      return send_hello(callback, state, para);
    }

    public string End_hello(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_hello();
    }

#endif

        public string hello(string para)
        {
#if !SILVERLIGHT
            send_hello(para);
            return recv_hello();

#else
      var asyncResult = Begin_hello(null, null, para);
      return End_hello(asyncResult);

#endif
        }
#if SILVERLIGHT
    public IAsyncResult send_hello(AsyncCallback callback, object state, string para)
#else
        public void send_hello(string para)
#endif
        {
            oprot_.WriteMessageBegin(new TMessage("hello", TMessageType.Call, seqid_));
            hello_args args = new hello_args();
            args.Para = para;
            args.Write(oprot_);
            oprot_.WriteMessageEnd();
#if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
#else
            oprot_.Transport.Flush();
#endif
        }

        public string recv_hello()
        {
            TMessage msg = iprot_.ReadMessageBegin();
            if (msg.Type == TMessageType.Exception)
            {
                TApplicationException x = TApplicationException.Read(iprot_);
                iprot_.ReadMessageEnd();
                throw x;
            }
            hello_result result = new hello_result();
            result.Read(iprot_);
            iprot_.ReadMessageEnd();
            if (result.__isset.success)
            {
                return result.Success;
            }
            throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "hello failed: unknown result");
        }


#if SILVERLIGHT
    public IAsyncResult Begin_add(AsyncCallback callback, object state, int a, int b)
    {
      return send_add(callback, state, a, b);
    }

    public int End_add(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_add();
    }

#endif

        public int @add(int a, int b)
        {
#if !SILVERLIGHT
            send_add(a, b);
            return recv_add();

#else
      var asyncResult = Begin_add(null, null, a, b);
      return End_add(asyncResult);

#endif
        }
#if SILVERLIGHT
    public IAsyncResult send_add(AsyncCallback callback, object state, int a, int b)
#else
        public void send_add(int a, int b)
#endif
        {
            oprot_.WriteMessageBegin(new TMessage("add", TMessageType.Call, seqid_));
            add_args args = new add_args();
            args.A = a;
            args.B = b;
            args.Write(oprot_);
            oprot_.WriteMessageEnd();
#if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
#else
            oprot_.Transport.Flush();
#endif
        }

        public int recv_add()
        {
            TMessage msg = iprot_.ReadMessageBegin();
            if (msg.Type == TMessageType.Exception)
            {
                TApplicationException x = TApplicationException.Read(iprot_);
                iprot_.ReadMessageEnd();
                throw x;
            }
            add_result result = new add_result();
            result.Read(iprot_);
            iprot_.ReadMessageEnd();
            if (result.__isset.success)
            {
                return result.Success;
            }
            throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "add failed: unknown result");
        }

    }
    public class Processor : TProcessor
    {
        public Processor(Iface iface)
        {
            iface_ = iface;
            processMap_["hello"] = hello_Process;
            processMap_["add"] = add_Process;
        }

        protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
        private Iface iface_;
        protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

        public bool Process(TProtocol iprot, TProtocol oprot)
        {
            try
            {
                TMessage msg = iprot.ReadMessageBegin();
                ProcessFunction fn;
                processMap_.TryGetValue(msg.Name, out fn);
                if (fn == null)
                {
                    TProtocolUtil.Skip(iprot, TType.Struct);
                    iprot.ReadMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
                    oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
                    x.Write(oprot);
                    oprot.WriteMessageEnd();
                    oprot.Transport.Flush();
                    return true;
                }
                fn(msg.SeqID, iprot, oprot);
            }
            catch (IOException)
            {
                return false;
            }
            return true;
        }

        public void hello_Process(int seqid, TProtocol iprot, TProtocol oprot)
        {
            hello_args args = new hello_args();
            args.Read(iprot);
            iprot.ReadMessageEnd();
            hello_result result = new hello_result();
            result.Success = iface_.hello(args.Para);
            oprot.WriteMessageBegin(new TMessage("hello", TMessageType.Reply, seqid));
            result.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
        }

        public void add_Process(int seqid, TProtocol iprot, TProtocol oprot)
        {
            add_args args = new add_args();
            args.Read(iprot);
            iprot.ReadMessageEnd();
            add_result result = new add_result();
            result.Success = iface_.@add(args.A, args.B);
            oprot.WriteMessageBegin(new TMessage("add", TMessageType.Reply, seqid));
            result.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
        }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class hello_args : TBase
    {
        private string _para;

        public string Para
        {
            get
            {
                return _para;
            }
            set
            {
                __isset.para = true;
                this._para = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool para;
        }

        public hello_args()
        {
        }

        public void Read(TProtocol iprot)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Para = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("hello_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Para != null && __isset.para)
                {
                    field.Name = "para";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Para);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("hello_args(");
            bool __first = true;
            if (Para != null && __isset.para)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Para: ");
                __sb.Append(Para);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class hello_result : TBase
    {
        private string _success;

        public string Success
        {
            get
            {
                return _success;
            }
            set
            {
                __isset.success = true;
                this._success = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool success;
        }

        public hello_result()
        {
        }

        public void Read(TProtocol iprot)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.String)
                            {
                                Success = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("hello_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.String;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Success);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("hello_result(");
            bool __first = true;
            if (Success != null && __isset.success)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Success: ");
                __sb.Append(Success);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class add_args : TBase
    {
        private int _a;
        private int _b;

        public int A
        {
            get
            {
                return _a;
            }
            set
            {
                __isset.a = true;
                this._a = value;
            }
        }

        public int B
        {
            get
            {
                return _b;
            }
            set
            {
                __isset.b = true;
                this._b = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool a;
            public bool b;
        }

        public add_args()
        {
        }

        public void Read(TProtocol iprot)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.I32)
                            {
                                A = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.I32)
                            {
                                B = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("add_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (__isset.a)
                {
                    field.Name = "a";
                    field.Type = TType.I32;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(A);
                    oprot.WriteFieldEnd();
                }
                if (__isset.b)
                {
                    field.Name = "b";
                    field.Type = TType.I32;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(B);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("add_args(");
            bool __first = true;
            if (__isset.a)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("A: ");
                __sb.Append(A);
            }
            if (__isset.b)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("B: ");
                __sb.Append(B);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }


#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class add_result : TBase
    {
        private int _success;

        public int Success
        {
            get
            {
                return _success;
            }
            set
            {
                __isset.success = true;
                this._success = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool success;
        }

        public add_result()
        {
        }

        public void Read(TProtocol iprot)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.I32)
                            {
                                Success = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("add_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.I32;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(Success);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("add_result(");
            bool __first = true;
            if (__isset.success)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Success: ");
                __sb.Append(Success);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }

}
